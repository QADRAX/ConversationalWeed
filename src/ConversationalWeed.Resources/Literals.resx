<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CurrentPlayerLabel" xml:space="preserve">
    <value>Es el turno de:</value>
  </data>
  <data name="GameBoardInfoTitle" xml:space="preserve">
    <value>Tablero de juego en la ronda: {0}</value>
  </data>
  <data name="GameOverLiteral" xml:space="preserve">
    <value>EL JUEGO HA TERMINADO</value>
  </data>
  <data name="HandBrickedMessage" xml:space="preserve">
    <value>Vaya, parece tu mano esta rota, no puedes usar una mierda, no tienes cartas validas en este momento, lo se, es una especie de fallo en matrix pero tendras que descartar una carta. Usa !weed discard [carta_de_tu_mano]</value>
  </data>
  <data name="HandInfoMessage" xml:space="preserve">
    <value>Usa !weed help 2 si necesitas ayuda con los comandos de juego. Esta es tu mano:</value>
  </data>
  <data name="HelpTitle" xml:space="preserve">
    <value>Mostrando información de comandos</value>
  </data>
  <data name="NewGame" xml:space="preserve">
    <value>Se empieza un nuevo juego de weed con los siguientes jugadores:</value>
  </data>
  <data name="NewGameFailed" xml:space="preserve">
    <value>Error al empezar un nuevo juego...</value>
  </data>
  <data name="PlayCardFailed" xml:space="preserve">
    <value>Vaya... Parece que no se ha podido jugar esta carta...</value>
  </data>
  <data name="PointsLabel" xml:space="preserve">
    <value>Puntos totales: {0}</value>
  </data>
  <data name="RoundsLeftLabel" xml:space="preserve">
    <value>Turnos restantes:</value>
  </data>
  <data name="TechnicalTieLiteral" xml:space="preserve">
    <value>Tenemos un empate entre:</value>
  </data>
  <data name="ValidateNoItemInPlayersInventory" xml:space="preserve">
    <value>Que chaval... No tienes esa skin comprada.</value>
  </data>
  <data name="ValidationCannotAccessBustedFields" xml:space="preserve">
    <value>No puedes entrar en parcelas custodiadas por la pasma, estas loco o que? quieres que te metan en el talego? Puto yonki de mierda...</value>
  </data>
  <data name="ValidationCannotAccessProtectedDogFields" xml:space="preserve">
    <value>No puedes entrar en una puta parcela custodiada por un perro de otro jugador como si nada, estas loco o que? quieres que te mate esa puta bestia? Yonki de mierda...</value>
  </data>
  <data name="ValidationCannotBustedNotIlegalFields" xml:space="preserve">
    <value>Eh tio, aqui no hay nada ilegal, la pasma no podrá hacer una mierda... </value>
  </data>
  <data name="ValidationCannotBustedOverBusted" xml:space="preserve">
    <value>Eh tio, no queremos pasarnos, la parcela de este jugador ya esta jodida por la pasma, busca otra cosa...</value>
  </data>
  <data name="ValidationCannotKillEmptyFields" xml:space="preserve">
    <value>A que pretendes matar pringao? esa parcela esta puto vacia, anda fumao mirate el tablerito...</value>
  </data>
  <data name="ValidationCannotPlantInDandelion" xml:space="preserve">
    <value>No puedes plantar en una parcela con dandelion fumao...</value>
  </data>
  <data name="ValidationCannotPlantLessValueWeed" xml:space="preserve">
    <value>Solo puedes plantar hierva de igual o mejor calidad en una parcela, que chaval...</value>
  </data>
  <data name="ValidationCannotStealEmptyFields" xml:space="preserve">
    <value>No puedes entrar a robar donde no hay nada, eres un pringao fuma chustas tio...</value>
  </data>
  <data name="ValidationCannotStealYourOwnFields" xml:space="preserve">
    <value>No puedes robar tu propia cosecha fumao de mierda!</value>
  </data>
  <data name="ValidationCannotUpgradePlantIfEmptyFieldAvailable" xml:space="preserve">
    <value>Las reglas del cultivo sostenible impiden que replantes la parcela de un jugador si hay parcelas libres accesibles a su alrededor.</value>
  </data>
  <data name="ValidationCardNotInHand" xml:space="preserve">
    <value>No tienes esa carta en la mano fumado...</value>
  </data>
  <data name="ValidationFieldAlreadyContainsDogProtection" xml:space="preserve">
    <value>Este campo ya tiene proteccion perruna amigo...</value>
  </data>
  <data name="ValidationHippieNeedsToSmokeSomething" xml:space="preserve">
    <value>Eh tio, tio, tio, tioooo... El hippie se tiene que fumar algo, aun que sea panoja... ya tu sabes primo...</value>
  </data>
  <data name="ValidationIsNotYourTurn" xml:space="preserve">
    <value>No es tu puto turno fumao de mierda, vaya tousted...</value>
  </data>
  <data name="ValidationMonzonNeedsToKillSomething" xml:space="preserve">
    <value>El señor Monzon esta aqui para arreglar tus problemas, no creo que una puta parcela vacia sea el problema de nadie, fumao de mierda.</value>
  </data>
  <data name="ValidationNoItemInShop" xml:space="preserve">
    <value>Que chaval... No existe esa skin en la tienda.</value>
  </data>
  <data name="ValidationNotEnoughMoney" xml:space="preserve">
    <value>Pobre de mierda... No tienes suficientes weed coins.</value>
  </data>
  <data name="ValidationNumberOfPlayers" xml:space="preserve">
    <value>El número de jugadores permitidos es de 3 a 8.</value>
  </data>
  <data name="ValidationPlayerAlreadyInGame" xml:space="preserve">
    <value>El jugador {0} esta jugando en otra partida fumao...</value>
  </data>
  <data name="ValidationTargetFieldNotFound" xml:space="preserve">
    <value>No se ha encontrado la parcela objetivo, igual eres un poco fumao...</value>
  </data>
  <data name="ValidationTargetPlayerNotFound" xml:space="preserve">
    <value>No se ha encontrado al jugador objetivo, no será que eres un fumao...</value>
  </data>
  <data name="ValidationYouAreNotBricked" xml:space="preserve">
    <value>Aún tienes alguna jugada posible en el campo, no puedes usar este comando.</value>
  </data>
  <data name="ValidationYouAreNotInAnyGame" xml:space="preserve">
    <value>No estas jugando ninguna partida fumao...</value>
  </data>
  <data name="ValidationYouMustToIncludeBeneficiaryField" xml:space="preserve">
    <value>Tienes que especificar en cual de tus parcelas quieres dejar la mercancia robada.</value>
  </data>
  <data name="ValidationYouOnlyCanPlantDandelionsInEmptyFields" xml:space="preserve">
    <value>Solo puedes usar dandelions en parcelas vacias, que chaval...</value>
  </data>
  <data name="WinnerLiteral" xml:space="preserve">
    <value>El ganador es: {0}</value>
  </data>
</root>